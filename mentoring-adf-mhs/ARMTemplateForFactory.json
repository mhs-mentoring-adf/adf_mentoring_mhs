{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "mentoring-adf-mhs"
		},
		"azurementoringaumhs_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'azurementoringaumhs'"
		},
		"azurementoringsql_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'azurementoringsql'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=azure-mentoring-mykhailo-senchuk.database.windows.net;Initial Catalog=movies;User ID=mhs"
		},
		"KeyVaultDefault_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://mentoring-key-vault-mhs.vault.azure.net/"
		},
		"SqlServerOnPremice_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "local-sqlServer-serverName"
		},
		"azurementoringDataMart_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "azurementoring-sql-datamart"
		},
		"azurementoringdatalakemhs_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://azurementoringdatalakemh.dfs.core.windows.net"
		},
		"azurementoringstoragemhs_properties_typeProperties_sasUri_secretName": {
			"type": "string",
			"defaultValue": "azurementoringstoragemhs-sas-url"
		},
		"azurementoringstoragemhs_online_properties_typeProperties_sasUri_secretName": {
			"type": "string",
			"defaultValue": "azurementoringstoragemhs-online"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/DIM_FACT master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DIM_OnlineService_Movies",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_OnlineService_Movies",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Fact_OnlinePurchase_OnlinePurchase_MonthlySnapshot",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DIM_OnlineService_Movies",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Fact_OnlinePurchase_OnlinePurchase_MonthlySnapshot",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-04-13T18:30:29Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/DIM_OnlineService_Movies')]",
				"[concat(variables('factoryId'), '/pipelines/Fact_OnlinePurchase_OnlinePurchase_MonthlySnapshot')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_OnlineService_Movies')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DIM_dataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Movies": {},
									"source1": {},
									"DimMovie": {},
									"DimOnlineService": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "Azure-IR-M8",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-04-13T18:28:11Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DIM_dataflow')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/Azure-IR-M8')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Fact_OnlinePurchase_OnlinePurchase_MonthlySnapshot')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "FACT_dataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"OnlinePurchase": {},
									"MoviesDIM": {},
									"OnlineServiceDIM": {},
									"OnlinePurchaseMonth": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "Azure-IR-M8",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine",
							"runConcurrently": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-04-13T17:59:17Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/FACT_dataflow')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/Azure-IR-M8')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDriven_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "MetadataDriven_DestinationDB",
								"type": "DatasetReference",
								"parameters": {
									"schema": "etl",
									"table": "tControlMetadata"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "FullLoadOneObject",
									"description": "Take a full snapshot on this object and copy it to the destination",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"additionalColumns": [
												{
													"name": "PipelineId",
													"value": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													}
												},
												{
													"name": "FilePath",
													"value": "$$FILEPATH"
												}
											],
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"wildcardFolderPath": {
													"value": "@json(item().SourceObjectSettings).folderPath",
													"type": "Expression"
												},
												"wildcardFileName": {
													"value": "@json(item().CopySourceSettings).wildcardFileName",
													"type": "Expression"
												}
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "@{json(item().CopySinkSettings).preCopyScript}",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"validateDataConsistency": false,
										"dataIntegrationUnits": {
											"value": "@json(item().CopyActivitySettings).DIU",
											"type": "Expression"
										},
										"translator": {
											"value": "@json(item().CopyActivitySettings).translator",
											"type": "Expression"
										}
									},
									"inputs": [
										{
											"referenceName": "MetadataDriven_SourceFile",
											"type": "DatasetReference",
											"parameters": {
												"cw_columnDelimiter": {
													"value": "@json(item().SourceObjectSettings).columnDelimiter",
													"type": "Expression"
												},
												"cw_escapeChar": {
													"value": "@json(item().SourceObjectSettings).escapeChar",
													"type": "Expression"
												},
												"cw_quoteChar": {
													"value": "@json(item().SourceObjectSettings).quoteChar",
													"type": "Expression"
												},
												"cw_firstRowAsHeader": {
													"value": "@json(item().SourceObjectSettings).firstRowAsHeader",
													"type": "Expression"
												},
												"cw_fileName": {
													"value": "@json(item().SourceObjectSettings).fileName",
													"type": "Expression"
												},
												"cw_folderPath": {
													"value": "@json(item().SourceObjectSettings).folderPath",
													"type": "Expression"
												},
												"cw_fileSystem": {
													"value": "@json(item().SourceObjectSettings).fileSystem",
													"type": "Expression"
												},
												"cw_Encoding": {
													"value": "@json(item().SourceObjectSettings).Encoding",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "MetadataDriven_DestinationDB",
											"type": "DatasetReference",
											"parameters": {
												"schema": {
													"value": "@json(item().SinkObjectSettings).schema",
													"type": "Expression"
												},
												"table": {
													"value": "@json(item().SinkObjectSettings).table",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Stored procedure1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "FullLoadOneObject",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[etl].[ins_copy_activity_log]",
										"storedProcedureParameters": {
											"copied_rows_number": {
												"value": {
													"value": "@activity('FullLoadOneObject').output.rowsCopied",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"copy_duration": {
												"value": {
													"value": "@activity('FullLoadOneObject').output.copyDuration",
													"type": "Expression"
												},
												"type": "Double"
											},
											"duration": {
												"value": {
													"value": "@activity('FullLoadOneObject').output.billingReference.billableDuration[0].duration",
													"type": "Expression"
												},
												"type": "Double"
											},
											"end_time": {
												"value": {
													"value": "@addSeconds(activity('FullLoadOneObject').output.executionDetails[0].start,activity('FullLoadOneObject').output.executionDetails[0].duration) ",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"files_number": {
												"value": {
													"value": "@activity('FullLoadOneObject').output.filesRead",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"meter_type": {
												"value": {
													"value": "@activity('FullLoadOneObject').output.billingReference.billableDuration[0].meterType",
													"type": "Expression"
												},
												"type": "String"
											},
											"parallel_copies_values": {
												"value": {
													"value": "@activity('FullLoadOneObject').output.usedParallelCopies",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"pipeline_name": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"queue_duration": {
												"value": {
													"value": "@activity('FullLoadOneObject').output.executionDetails[0].profile.queue.duration",
													"type": "Expression"
												},
												"type": "Double"
											},
											"read_rows_number": {
												"value": {
													"value": "@activity('FullLoadOneObject').output.rowsRead",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"run_id": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"start_time": {
												"value": {
													"value": "@activity('FullLoadOneObject').output.executionDetails[0].start",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"status": {
												"value": {
													"value": "@activity('FullLoadOneObject').output.executionDetails[0].status",
													"type": "Expression"
												},
												"type": "String"
											},
											"transfer_duration": {
												"value": {
													"value": "@activity('FullLoadOneObject').output.executionDetails[0].profile.transfer.duration",
													"type": "Expression"
												},
												"type": "Double"
											},
											"unit": {
												"value": {
													"value": "@activity('FullLoadOneObject').output.billingReference.billableDuration[0].unit",
													"type": "Expression"
												},
												"type": "String"
											},
											"used_DIU": {
												"value": {
													"value": "@activity('FullLoadOneObject').output.executionDetails[0].usedDataIntegrationUnits",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "azurementoringsql",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Stored procedure2",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "FullLoadOneObject",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[etl].[ins_error_log]",
										"storedProcedureParameters": {
											"datetime": {
												"value": {
													"value": "@utcNow()",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"error_code": {
												"value": {
													"value": "@activity('FullLoadOneObject').error.errorCode",
													"type": "Expression"
												},
												"type": "String"
											},
											"error_message": {
												"value": {
													"value": "@activity('FullLoadOneObject').error.message",
													"type": "Expression"
												},
												"type": "String"
											},
											"failure_type": {
												"value": {
													"value": "@activity('FullLoadOneObject').error.failureType",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipeline_name": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"run_id": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "azurementoringsql",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "custom_metadata_driven"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-28T21:21:02Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MetadataDriven_DestinationDB')]",
				"[concat(variables('factoryId'), '/datasets/MetadataDriven_SourceFile')]",
				"[concat(variables('factoryId'), '/linkedServices/azurementoringsql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/fail_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Fail1",
						"type": "Fail",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"message": "test fail",
							"errorCode": "test code"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-05-04T21:00:26Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/master_one')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute update database",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute copy to data lake",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "movies_copy_sql",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute archive source files",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute update database",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "movies_archive",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute copy to data lake",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "movies_copy_with_date",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-12T16:06:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/movies_copy_sql')]",
				"[concat(variables('factoryId'), '/pipelines/movies_archive')]",
				"[concat(variables('factoryId'), '/pipelines/movies_copy_with_date')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/movies_archive')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"wildcardFolderPath": "movie",
									"wildcardFileName": "*",
									"deleteFilesAfterCompletion": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "movies_sink",
								"type": "DatasetReference",
								"parameters": {
									"TargetFileName": "*"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "movies_archive_sink",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"pipeline-trigger-time": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-14T17:02:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/movies_sink')]",
				"[concat(variables('factoryId'), '/datasets/movies_archive_sink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/movies_copy_sql')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy credits",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "source_filename",
										"value": "$$FILEPATH"
									},
									{
										"name": "pipelineId",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"wildcardFolderPath": "movie",
									"wildcardFileName": "credits*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE stg.credits",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": true,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "cast",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cast",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "crew",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "crew",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "pipelineId",
											"type": "String"
										},
										"sink": {
											"name": "pipelineId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "source_filename",
											"type": "String"
										},
										"sink": {
											"name": "source_filename",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "credits_csv_source",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "credits_sql_stg",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy movies_metadata",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "source_filename",
										"value": "$$FILEPATH"
									},
									{
										"name": "pipelineId",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"wildcardFolderPath": "movie",
									"wildcardFileName": "movies_metadata*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE stg.movies_metadata",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": true,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "adult",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "adult",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "belongs_to_collection",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "belongs_to_collection",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "budget",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "budget",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "genres",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "genres",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "homepage",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "homepage",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "imdb_id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "imdb_id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "original_language",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "original_language",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "original_title",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "original_title",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "overview",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "overview",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "popularity",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "popularity",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "poster_path",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "poster_path",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "production_companies",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "production_companies",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "production_countries",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "production_countries",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "release_date",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "release_date",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "revenue",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "revenue",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "runtime",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "runtime",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "spoken_languages",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "spoken_languages",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "status",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "status",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "tagline",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "tagline",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "title",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "title",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "video",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "video",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "vote_average",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "vote_average",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "vote_count",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "vote_count",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "pipelineId",
											"type": "String"
										},
										"sink": {
											"name": "pipelineId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "source_filename",
											"type": "String"
										},
										"sink": {
											"name": "source_filename",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "movies_metadata_csv_source",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "movies_metadata_sql_stg",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy ratings",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "source_filename",
										"value": "$$FILEPATH"
									},
									{
										"name": "pipelineId",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"wildcardFolderPath": "movie",
									"wildcardFileName": "ratings*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE stg.ratings",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "userId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "userId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "movieId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "movieId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "rating",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "rating",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "timestamp",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "timestamp",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "pipelineId",
											"type": "String"
										},
										"sink": {
											"name": "pipelineId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "source_filename",
											"type": "String"
										},
										"sink": {
											"name": "source_filename",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ratings_csv_source",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ratings_sql_stg",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "L﻿oad data to tCast",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy ratings",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Copy movies_metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Copy credits",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateCast]"
						},
						"linkedServiceName": {
							"referenceName": "azurementoringsql",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "L﻿oad data to tCompany",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "L﻿oad data to tCast",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "dbo.spPopulateCompany"
						},
						"linkedServiceName": {
							"referenceName": "azurementoringsql",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "L﻿oad data tGenre",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "L﻿oad data to tCompany",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "dbo.spPopulateGenre"
						},
						"linkedServiceName": {
							"referenceName": "azurementoringsql",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "L﻿oad data tMovieStatus",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "L﻿oad data tGenre",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "dbo.spPopulateMovieStatus"
						},
						"linkedServiceName": {
							"referenceName": "azurementoringsql",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "L﻿oad data tMoviesCastMap",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "L﻿oad data tMovies",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "dbo.spPopulateMoviesCastMap"
						},
						"linkedServiceName": {
							"referenceName": "azurementoringsql",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "L﻿oad data tMoviesCompanyMap",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "L﻿oad data tMoviesCastMap",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "dbo.spPopulateMoviesCompanyMap"
						},
						"linkedServiceName": {
							"referenceName": "azurementoringsql",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "L﻿oad data tMoviesGenreMap",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "L﻿oad data tMoviesCompanyMap",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "dbo.spPopulateMoviesGenreMap"
						},
						"linkedServiceName": {
							"referenceName": "azurementoringsql",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "L﻿oad data tRatings",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "L﻿oad data tMoviesGenreMap",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "dbo.spPopulatetRatings"
						},
						"linkedServiceName": {
							"referenceName": "azurementoringsql",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "L﻿oad data tMovies",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "L﻿oad data tMovieStatus",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "dbo.spPopulateMovies"
						},
						"linkedServiceName": {
							"referenceName": "azurementoringsql",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-14T17:03:38Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/credits_csv_source')]",
				"[concat(variables('factoryId'), '/datasets/credits_sql_stg')]",
				"[concat(variables('factoryId'), '/datasets/movies_metadata_csv_source')]",
				"[concat(variables('factoryId'), '/datasets/movies_metadata_sql_stg')]",
				"[concat(variables('factoryId'), '/datasets/ratings_csv_source')]",
				"[concat(variables('factoryId'), '/datasets/ratings_sql_stg')]",
				"[concat(variables('factoryId'), '/linkedServices/azurementoringsql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/movies_copy_with_date')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "set datetime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "movies_source",
								"type": "DatasetReference",
								"parameters": {
									"Filename": "*.csv"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": false,
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Info",
												"enableReliableLogging": true
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "azurementoringdatalakemhs",
													"type": "LinkedServiceReference"
												},
												"path": "log/copyactivity-logs"
											}
										}
									},
									"inputs": [
										{
											"referenceName": "movies_source",
											"type": "DatasetReference",
											"parameters": {
												"Filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "movies_sink",
											"type": "DatasetReference",
											"parameters": {
												"TargetFileName": "@concat(replace(item().name,'.csv',''), '_', variables('pipeline-trigger-time'), '.csv')"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "set datetime",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "pipeline-trigger-time",
							"value": {
								"value": "@formatDateTime(utcNow(),'yyyyMMddhhmmss')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"pipeline-trigger-time": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-12T16:06:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/movies_source')]",
				"[concat(variables('factoryId'), '/datasets/movies_sink')]",
				"[concat(variables('factoryId'), '/linkedServices/azurementoringdatalakemhs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/new_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/online_archive')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"wildcardFolderPath": "online",
									"wildcardFileName": "*.json",
									"deleteFilesAfterCompletion": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false,
							"parallelCopies": 32,
							"dataIntegrationUnits": 2
						},
						"inputs": [
							{
								"referenceName": "online_sink",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "online_archive",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-04-02T20:45:35Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/online_sink')]",
				"[concat(variables('factoryId'), '/datasets/online_archive')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/online_copy_sql')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"additionalColumns": [
									{
										"name": "source_filename",
										"value": "$$FILEPATH"
									},
									{
										"name": "pipelineId",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"wildcardFolderPath": "online",
									"wildcardFileName": "*.json",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE [stg].[online_purchase]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": true,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"parallelCopies": 32,
							"dataIntegrationUnits": 2,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['serviceName']"
										},
										"sink": {
											"name": "online_service_name",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['serviceCode']"
										},
										"sink": {
											"name": "online_service_code",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['movieId']"
										},
										"sink": {
											"name": "movie_id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['userId']"
										},
										"sink": {
											"name": "user_id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['price']"
										},
										"sink": {
											"name": "price",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['transaction']['id']"
										},
										"sink": {
											"name": "transaction_id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['transaction']['datetime']"
										},
										"sink": {
											"name": "transaction_date",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['source_filename']"
										},
										"sink": {
											"name": "source_filename",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['pipelineId']"
										},
										"sink": {
											"name": "pipelineId",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "online_data_lake",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "online_purchase_stg",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Stored procedure Online Service",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateOnlineService]"
						},
						"linkedServiceName": {
							"referenceName": "azurementoringsql",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Stored procedure Online Purchase",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Stored procedure Online Service",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateOnlinePurchase]"
						},
						"linkedServiceName": {
							"referenceName": "azurementoringsql",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-04-02T20:24:04Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/online_data_lake')]",
				"[concat(variables('factoryId'), '/datasets/online_purchase_stg')]",
				"[concat(variables('factoryId'), '/linkedServices/azurementoringsql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/online_incremental_copy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyFiles",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LastModifiedSource",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "online//"
							},
							{
								"name": "Destination",
								"value": "raw/online/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"modifiedDatetimeStart": {
										"value": "@activity('LookupWatermarkOld').output.firstRow.WatermarkValue",
										"type": "Expression"
									},
									"modifiedDatetimeEnd": {
										"value": "@variables('LastModifiedSource')",
										"type": "Expression"
									},
									"wildcardFileName": "*",
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"metadata": [
										{
											"name": "LastModified",
											"value": "$$LASTMODIFIED"
										}
									]
								}
							},
							"enableStaging": false,
							"parallelCopies": 32,
							"enableSkipIncompatibleRow": false,
							"skipErrorFile": {
								"fileMissing": true
							},
							"validateDataConsistency": false,
							"dataIntegrationUnits": 2
						},
						"inputs": [
							{
								"referenceName": "online_source_items",
								"type": "DatasetReference",
								"parameters": {
									"Filename": "*"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "online_sink",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "LookupWatermarkOld",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT\nTableName,\nWatermarkValue\nFROM\nstg.watermarktable \nWHERE\nTableName = 'OnlineBlob'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "sink_watermarktable",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "StoredProceduretoWriteWatermarkActivity",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CopyFiles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_write_watermark]",
							"storedProcedureParameters": {
								"LastModifiedtime": {
									"value": {
										"value": "@variables('LastModifiedSource')",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"TableName": {
									"value": {
										"value": "@{activity('LookupWatermarkOld').output.firstRow.TableName}",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "azurementoringsql",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LastModifiedSource",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupWatermarkOld",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "LastModifiedSource",
							"value": {
								"value": "@pipeline().TriggerTime",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"LastModified": {
						"type": "String"
					},
					"LastModifiedSource": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-04-05T12:57:54Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/online_source_items')]",
				"[concat(variables('factoryId'), '/datasets/online_sink')]",
				"[concat(variables('factoryId'), '/datasets/sink_watermarktable')]",
				"[concat(variables('factoryId'), '/linkedServices/azurementoringsql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/online_master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute incremental_copy",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "online_incremental_copy",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute copy to sql server",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute incremental_copy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "online_copy_sql",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute archive",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute copy to sql server",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "online_archive",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-04-02T20:48:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/online_incremental_copy')]",
				"[concat(variables('factoryId'), '/pipelines/online_copy_sql')]",
				"[concat(variables('factoryId'), '/pipelines/online_archive')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "send_email",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "get_url",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@activity('get_url').output.value",
								"type": "Expression"
							},
							"method": "POST",
							"headers": {},
							"body": {
								"message": "This is a custom dynamic message from your pipeline with run ID @{pipeline().RunId} from data factory: @{pipeline().DataFactory}",
								"dataFactoryName": "",
								"pipelineName": "@{pipeline().Pipeline}",
								"receiver": "@{pipeline().parameters.receiver}",
								"status": "success"
							}
						}
					},
					{
						"name": "get_url",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@pipeline().globalParameters.logic_apps_html",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {},
							"body": {
								"message": "This is a custom dynamic message from your pipeline with run ID @{pipeline().RunId}.",
								"dataFactoryName": "@{pipeline().DataFactory}",
								"pipelineName": "@{pipeline().Pipeline}",
								"receiver": "@{pipeline().parameters.receiver}"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "send_email_error",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "send_email",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@activity('get_url').output.value",
								"type": "Expression"
							},
							"method": "POST",
							"headers": {},
							"body": {
								"message": "This is a custom dynamic message from your pipeline with run ID @{pipeline().RunId} from data factory: @{pipeline().DataFactory}, error message: @{activity('send_email').error.message}",
								"dataFactoryName": "@{pipeline().DataFactory}",
								"pipelineName": "@{pipeline().Pipeline}",
								"receiver": "@{pipeline().parameters.receiver}",
								"status": "error"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"receiver": {
						"type": "string",
						"defaultValue": "mykhailo_senchuk@epam.com"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-05-15T23:10:48Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/rating_copy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ratings_file",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "rating_file_sink",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-08T06:49:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ratings_file')]",
				"[concat(variables('factoryId'), '/datasets/rating_file_sink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tickets_copy_sql')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy tickets to stage",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LookupWatermarkOld",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupWatermarkNEW",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "select * from dbo.Tickets\nwhere \nTransactionDt > '@{activity('LookupWatermarkOld').output.firstRow.WatermarkValue}' \nand TransactionDt <= '@{activity('LookupWatermarkNEW').output.firstRow.NewWatermarkvalue}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE stg.cinema_tickets",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": true,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CinemaCode",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "cinema_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CinemaName",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "cinema_name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "MovieId",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "movie_id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "TicketCount",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "ticket_count",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "TicketPrice",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 1,
											"precision": 4
										},
										"sink": {
											"name": "ticket_price",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 1,
											"precision": 4
										}
									},
									{
										"source": {
											"name": "TransactionId",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "transaction_id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TransactionDt",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "transaction_date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "tickets_source",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "tickets_sink",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "LookupWatermarkOld",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT\nTableName,\nWatermarkValue\nFROM\nstg.watermarktable \nWHERE\nTableName = 'Tickets'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "sink_watermarktable",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "LookupWatermarkNEW",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT \n      MAX([TransactionDt]) as NewWatermarkvalue\n  FROM [CinemaTickets].[dbo].[Tickets]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "tickets_source",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "StoredProceduretoWriteWatermarkActivity",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Merge tCinemaTickets",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_write_watermark]",
							"storedProcedureParameters": {
								"LastModifiedtime": {
									"value": {
										"value": "@{activity('LookupWaterMarkNEW').output.firstRow.NewWatermarkvalue}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"TableName": {
									"value": {
										"value": "@{activity('LookupWatermarkOld').output.firstRow.TableName}",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "azurementoringsql",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Merge tCinema",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy tickets to stage",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateCinema]"
						},
						"linkedServiceName": {
							"referenceName": "azurementoringsql",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Merge tCinemaTickets",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Merge tCinema",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateCinemaTickets]"
						},
						"linkedServiceName": {
							"referenceName": "azurementoringsql",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-04-05T12:57:54Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/tickets_source')]",
				"[concat(variables('factoryId'), '/datasets/tickets_sink')]",
				"[concat(variables('factoryId'), '/datasets/sink_watermarktable')]",
				"[concat(variables('factoryId'), '/linkedServices/azurementoringsql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDrivenCopyTask_cfi_SourceDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azurementoringdatalakemhs",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_columnDelimiter": {
						"type": "String"
					},
					"cw_escapeChar": {
						"type": "String"
					},
					"cw_quoteChar": {
						"type": "String"
					},
					"cw_firstRowAsHeader": {
						"type": "Bool",
						"defaultValue": true
					},
					"cw_fileName": {
						"type": "Object"
					},
					"cw_folderPath": {
						"type": "String"
					},
					"cw_fileSystem": {
						"type": "String"
					}
				},
				"folder": {
					"name": "MetadataDrivenCopyTask_cfi_20230418"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().cw_folderPath",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().cw_fileSystem",
							"type": "Expression"
						}
					},
					"columnDelimiter": {
						"value": "@dataset().cw_columnDelimiter",
						"type": "Expression"
					},
					"escapeChar": {
						"value": "@dataset().cw_escapeChar",
						"type": "Expression"
					},
					"firstRowAsHeader": true,
					"quoteChar": {
						"value": "@dataset().cw_quoteChar",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azurementoringdatalakemhs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDriven_DestinationDB')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azurementoringsql",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema": {
						"type": "string"
					},
					"table": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azurementoringsql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDriven_SourceFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azurementoringdatalakemhs",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_columnDelimiter": {
						"type": "String"
					},
					"cw_escapeChar": {
						"type": "String"
					},
					"cw_quoteChar": {
						"type": "String"
					},
					"cw_firstRowAsHeader": {
						"type": "Bool",
						"defaultValue": true
					},
					"cw_fileName": {
						"type": "Object"
					},
					"cw_folderPath": {
						"type": "String"
					},
					"cw_fileSystem": {
						"type": "String"
					},
					"cw_Encoding": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().cw_fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().cw_folderPath",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().cw_fileSystem",
							"type": "Expression"
						}
					},
					"columnDelimiter": {
						"value": "@dataset().cw_columnDelimiter",
						"type": "Expression"
					},
					"encodingName": {
						"value": "@dataset().cw_Encoding",
						"type": "Expression"
					},
					"escapeChar": {
						"value": "@dataset().cw_escapeChar",
						"type": "Expression"
					},
					"firstRowAsHeader": true,
					"quoteChar": {
						"value": "@dataset().cw_quoteChar",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azurementoringdatalakemhs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Movies_sql_DIM')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azurementoringDataMart",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "MovieKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieIdNK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Title",
						"type": "nvarchar"
					},
					{
						"name": "ReleaseDate",
						"type": "date"
					},
					{
						"name": "Runtime",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieStatus",
						"type": "nvarchar"
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "DimMovie"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azurementoringDataMart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OnlinePurchase_monthly_sql_dim')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azurementoringDataMart",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "MonthKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OnlineServiceKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PurchaseAmount",
						"type": "decimal",
						"precision": 10,
						"scale": 1
					},
					{
						"name": "PurchaseQuantity",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "FactOnlinePurchase_MonthlySnapshot"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azurementoringDataMart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OnlinePurchase_sql_3nf')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azurementoringsql",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "tOnlinePurchase"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azurementoringsql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OnlinePurchase_sql_dim')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azurementoringDataMart",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "DateKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OnlineServiceKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Price",
						"type": "decimal",
						"precision": 4,
						"scale": 1
					},
					{
						"name": "TransactionId",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "FactOnlinePurchase"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azurementoringDataMart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OnlineService_sql_3nf')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azurementoringsql",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ServiceId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ServiceCode",
						"type": "nvarchar"
					},
					{
						"name": "ServiceName",
						"type": "nvarchar"
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tOnlineService"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azurementoringsql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OnlineService_sql_DIM')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azurementoringDataMart",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ServiceKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ServiceCode",
						"type": "nvarchar"
					},
					{
						"name": "ServiceName",
						"type": "nvarchar"
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "DimOnlineService"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azurementoringDataMart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/credits_csv_source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azurementoringdatalakemhs",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "movie",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\"",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "cast",
						"type": "String"
					},
					{
						"name": "crew",
						"type": "String"
					},
					{
						"name": "id",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azurementoringdatalakemhs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/credits_sql_stg')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azurementoringsql",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "cast",
						"type": "nvarchar"
					},
					{
						"name": "crew",
						"type": "nvarchar"
					},
					{
						"name": "id",
						"type": "nvarchar"
					},
					{
						"name": "pipelineId",
						"type": "nvarchar"
					},
					{
						"name": "source_filename",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "credits"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azurementoringsql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/movies_archive_sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azurementoringdatalakemhs",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "movie/archive",
						"fileSystem": "raw"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azurementoringdatalakemhs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/movies_metadata_csv_source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azurementoringdatalakemhs",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "movies_metadata*",
						"folderPath": "movie",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\"",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azurementoringdatalakemhs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/movies_metadata_sql_stg')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azurementoringsql",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "adult",
						"type": "nvarchar"
					},
					{
						"name": "belongs_to_collection",
						"type": "nvarchar"
					},
					{
						"name": "budget",
						"type": "nvarchar"
					},
					{
						"name": "genres",
						"type": "nvarchar"
					},
					{
						"name": "homepage",
						"type": "nvarchar"
					},
					{
						"name": "id",
						"type": "nvarchar"
					},
					{
						"name": "imdb_id",
						"type": "nvarchar"
					},
					{
						"name": "original_language",
						"type": "nvarchar"
					},
					{
						"name": "original_title",
						"type": "nvarchar"
					},
					{
						"name": "overview",
						"type": "nvarchar"
					},
					{
						"name": "popularity",
						"type": "nvarchar"
					},
					{
						"name": "poster_path",
						"type": "nvarchar"
					},
					{
						"name": "production_companies",
						"type": "nvarchar"
					},
					{
						"name": "production_countries",
						"type": "nvarchar"
					},
					{
						"name": "release_date",
						"type": "nvarchar"
					},
					{
						"name": "revenue",
						"type": "nvarchar"
					},
					{
						"name": "runtime",
						"type": "nvarchar"
					},
					{
						"name": "spoken_languages",
						"type": "nvarchar"
					},
					{
						"name": "status",
						"type": "nvarchar"
					},
					{
						"name": "tagline",
						"type": "nvarchar"
					},
					{
						"name": "title",
						"type": "nvarchar"
					},
					{
						"name": "video",
						"type": "nvarchar"
					},
					{
						"name": "vote_average",
						"type": "nvarchar"
					},
					{
						"name": "vote_count",
						"type": "nvarchar"
					},
					{
						"name": "pipelineId",
						"type": "nvarchar"
					},
					{
						"name": "source_filename",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "movies_metadata"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azurementoringsql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/movies_sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azurementoringdatalakemhs",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TargetFileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().TargetFileName",
							"type": "Expression"
						},
						"folderPath": "movie",
						"fileSystem": "raw"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azurementoringdatalakemhs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/movies_source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azurementoringstoragemhs",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().Filename",
							"type": "Expression"
						},
						"container": "movies"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azurementoringstoragemhs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/movies_sql_3nf')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azurementoringsql",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "MovieId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieIdNK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Budget",
						"type": "int",
						"precision": 10
					},
					{
						"name": "HomepagePath",
						"type": "nvarchar"
					},
					{
						"name": "Title",
						"type": "nvarchar"
					},
					{
						"name": "OriginalTitle",
						"type": "nvarchar"
					},
					{
						"name": "ReleaseDate",
						"type": "date"
					},
					{
						"name": "Revenue",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "Runtime",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieStatusId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AvgVote",
						"type": "decimal",
						"precision": 3,
						"scale": 1
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SrcFileName",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tMovies"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azurementoringsql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/online_archive')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azurementoringdatalakemhs",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "online/archive",
						"fileSystem": "raw"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azurementoringdatalakemhs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/online_data_lake')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azurementoringdatalakemhs",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "online",
						"fileSystem": "raw"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"serviceName": {
							"type": "string"
						},
						"serviceCode": {
							"type": "string"
						},
						"movieId": {
							"type": "integer"
						},
						"userId": {
							"type": "integer"
						},
						"price": {
							"type": "string"
						},
						"transaction": {
							"type": "object",
							"properties": {
								"id": {
									"type": "string"
								},
								"datetime": {
									"type": "string"
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azurementoringdatalakemhs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/online_purchase_stg')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azurementoringsql",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "online_service_name",
						"type": "nvarchar"
					},
					{
						"name": "online_service_code",
						"type": "nvarchar"
					},
					{
						"name": "movie_id",
						"type": "nvarchar"
					},
					{
						"name": "user_id",
						"type": "nvarchar"
					},
					{
						"name": "price",
						"type": "nvarchar"
					},
					{
						"name": "transaction_id",
						"type": "nvarchar"
					},
					{
						"name": "transaction_date",
						"type": "nvarchar"
					},
					{
						"name": "source_filename",
						"type": "nvarchar"
					},
					{
						"name": "pipelineId",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "online_purchase"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azurementoringsql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/online_sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azurementoringdatalakemhs",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "online",
						"fileSystem": "raw"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azurementoringdatalakemhs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/online_source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azurementoringstoragemhs_online",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "online"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azurementoringstoragemhs_online')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/online_source_items')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azurementoringstoragemhs_online",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().Filename",
							"type": "Expression"
						},
						"container": "online"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azurementoringstoragemhs_online')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/rating_file_sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azurementoringdatalakemhs",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "ratings.csv",
						"folderPath": "movie",
						"fileSystem": "raw"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azurementoringdatalakemhs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ratings_csv_source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azurementoringdatalakemhs",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "movie",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\"",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "userId",
						"type": "String"
					},
					{
						"name": "movieId",
						"type": "String"
					},
					{
						"name": "rating",
						"type": "String"
					},
					{
						"name": "timestamp",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azurementoringdatalakemhs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ratings_file')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azurementoringaumhs",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "ratings.csv",
						"container": "module4"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azurementoringaumhs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ratings_sql_stg')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azurementoringsql",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "userId",
						"type": "nvarchar"
					},
					{
						"name": "movieId",
						"type": "nvarchar"
					},
					{
						"name": "rating",
						"type": "nvarchar"
					},
					{
						"name": "timestamp",
						"type": "nvarchar"
					},
					{
						"name": "pipelineId",
						"type": "nvarchar"
					},
					{
						"name": "source_filename",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "ratings"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azurementoringsql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sink_watermarktable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azurementoringsql",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "TableName",
						"type": "varchar"
					},
					{
						"name": "WatermarkValue",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "watermarktable"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azurementoringsql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tickets_sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azurementoringsql",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "cinema_code",
						"type": "nvarchar"
					},
					{
						"name": "cinema_name",
						"type": "nvarchar"
					},
					{
						"name": "movie_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ticket_count",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ticket_price",
						"type": "decimal",
						"precision": 4,
						"scale": 1
					},
					{
						"name": "transaction_id",
						"type": "nvarchar"
					},
					{
						"name": "transaction_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "cinema_tickets"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/azurementoringsql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tickets_source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServerOnPremice",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "CinemaCode",
						"type": "nvarchar"
					},
					{
						"name": "CinemaName",
						"type": "nvarchar"
					},
					{
						"name": "MovieId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TicketCount",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TicketPrice",
						"type": "decimal",
						"precision": 4,
						"scale": 1
					},
					{
						"name": "TransactionId",
						"type": "nvarchar"
					},
					{
						"name": "TransactionDt",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Tickets"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServerOnPremice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/KeyVaultDefault')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('KeyVaultDefault_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerOnPremice')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "KeyVaultDefault",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('SqlServerOnPremice_properties_typeProperties_connectionString_secretName')]"
					}
				},
				"connectVia": {
					"referenceName": "SelfHostedIR",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/SelfHostedIR')]",
				"[concat(variables('factoryId'), '/linkedServices/KeyVaultDefault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/azurementoringDataMart')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "KeyVaultDefault",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('azurementoringDataMart_properties_typeProperties_connectionString_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/KeyVaultDefault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/azurementoringaumhs')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('azurementoringaumhs_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/azurementoringdatalakemhs')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('azurementoringdatalakemhs_properties_typeProperties_url')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/azurementoringsql')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('azurementoringsql_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "KeyVaultDefault",
							"type": "LinkedServiceReference"
						},
						"secretName": "azurementoring-sql-mhs-password"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/KeyVaultDefault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/azurementoringstoragemhs')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "KeyVaultDefault",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('azurementoringstoragemhs_properties_typeProperties_sasUri_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/KeyVaultDefault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/azurementoringstoragemhs_online')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "KeyVaultDefault",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('azurementoringstoragemhs_online_properties_typeProperties_sasUri_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/KeyVaultDefault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tickets_daily')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "tickets_copy_sql",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2023-03-22T23:01:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								10
							],
							"hours": [
								23
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/tickets_copy_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Azure-IR-M8')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "France Central",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 5,
							"cleanup": false,
							"customProperties": []
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SelfHostedIR')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "movies_sql_3nf",
								"type": "DatasetReference"
							},
							"name": "Movies"
						},
						{
							"dataset": {
								"referenceName": "OnlineService_sql_3nf",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Movies_sql_DIM",
								"type": "DatasetReference"
							},
							"name": "DimMovie"
						},
						{
							"dataset": {
								"referenceName": "OnlineService_sql_DIM",
								"type": "DatasetReference"
							},
							"name": "DimOnlineService"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "derivedColumn2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          MovieIdNK as integer,",
						"          Title as string,",
						"          ReleaseDate as date,",
						"          Runtime as integer,",
						"          MovieStatusName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT\\n     MovieIdNK\\n     ,Title\\n     ,ReleaseDate\\n     ,Runtime\\n     ,s.MovieStatusName\\nFROM\\n     dbo.tmovies m\\n     JOIN [dbo].[tMovieStatus] s on m.MovieStatusId = s.MovieStatusId',",
						"     format: 'query') ~> Movies",
						"source(output(",
						"          ServiceCode as string,",
						"          ServiceName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT\\n    ServiceCode\\n    ,ServiceName\\nFROM\\n    dbo.tOnlineService',",
						"     format: 'query') ~> source1",
						"Movies derive(CreatedDate = currentTimestamp(),",
						"          ModifiedDate = currentTimestamp()) ~> derivedColumn1",
						"source1 derive(CreatedDate = currentTimestamp(),",
						"          ModifiedDate = currentTimestamp()) ~> derivedColumn2",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          MovieKey as integer,",
						"          MovieIdNK as integer,",
						"          Title as string,",
						"          ReleaseDate as date,",
						"          Runtime as integer,",
						"          MovieStatus as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     preSQLs:['TRUNCATE TABLE [dbo].[DimMovie]'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          MovieIdNK,",
						"          Title,",
						"          ReleaseDate,",
						"          Runtime,",
						"          MovieStatus = MovieStatusName,",
						"          CreatedDate,",
						"          ModifiedDate",
						"     )) ~> DimMovie",
						"derivedColumn2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ServiceKey as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     preSQLs:['TRUNCATE TABLE DimOnlineService'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DimOnlineService"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/movies_sql_3nf')]",
				"[concat(variables('factoryId'), '/datasets/OnlineService_sql_3nf')]",
				"[concat(variables('factoryId'), '/datasets/Movies_sql_DIM')]",
				"[concat(variables('factoryId'), '/datasets/OnlineService_sql_DIM')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FACT_dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "OnlinePurchase_sql_3nf",
								"type": "DatasetReference"
							},
							"name": "OnlinePurchase"
						},
						{
							"dataset": {
								"referenceName": "Movies_sql_DIM",
								"type": "DatasetReference"
							},
							"name": "MoviesDIM"
						},
						{
							"dataset": {
								"referenceName": "OnlineService_sql_DIM",
								"type": "DatasetReference"
							},
							"name": "OnlineServiceDIM"
						},
						{
							"dataset": {
								"referenceName": "OnlinePurchase_sql_3nf",
								"type": "DatasetReference"
							},
							"name": "OnlinePurchaseMonth"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "OnlinePurchase_sql_dim",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "OnlinePurchase_monthly_sql_dim",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "join2"
						},
						{
							"name": "join3"
						},
						{
							"name": "join4"
						}
					],
					"scriptLines": [
						"source(output(",
						"          MovieIdNK as integer,",
						"          ServiceCode as string,",
						"          Price as decimal(4,1),",
						"          TransactionId as string,",
						"          TransactionDate as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT \\n     m.MovieIdNK\\n     ,s.ServiceCode\\n     ,[Price]\\n     ,[TransactionId]\\n     ,FORMAT([TransactionDate], \\'yyyyMMdd\\') as TransactionDate\\nFROM [dbo].[tOnlinePurchase] p\\nJOIN dbo.tOnlineService s ON s.ServiceId = p.ServiceId\\nJOIN dbo.tMovies m ON m.MovieId = p.MovieId',",
						"     format: 'query') ~> OnlinePurchase",
						"source(output(",
						"          MovieKey as integer,",
						"          MovieIdNK as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT\\nMovieKey\\n,MovieIdNK\\nFROM dbo.DimMovie',",
						"     format: 'query') ~> MoviesDIM",
						"source(output(",
						"          ServiceKey as integer,",
						"          ServiceCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT\\nServiceKey\\n,ServiceCode\\nFROM dbo.DimOnlineService',",
						"     format: 'query') ~> OnlineServiceDIM",
						"source(output(",
						"          MonthKey as integer,",
						"          MovieIdNK as integer,",
						"          ServiceCode as string,",
						"          PurchaseAmount as decimal(38,1),",
						"          PurchaseQuantity as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT \\n     FORMAT([TransactionDate], \\'yyyyMM\\') as MonthKey\\n     ,m.MovieIdNK\\n     ,s.ServiceCode\\n     ,SUM([Price]) PurchaseAmount\\n     ,COUNT(*) PurchaseQuantity\\nFROM [dbo].[tOnlinePurchase] p\\nJOIN dbo.tOnlineService s ON s.ServiceId = p.ServiceId\\nJOIN dbo.tMovies m ON m.MovieId = p.MovieId\\nGROUP BY \\n     FORMAT([TransactionDate], \\'yyyyMM\\')\\n     ,m.MovieIdNK\\n     ,s.ServiceCode',",
						"     format: 'query') ~> OnlinePurchaseMonth",
						"OnlinePurchase, MoviesDIM join(OnlinePurchase@MovieIdNK == MoviesDIM@MovieIdNK,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1, OnlineServiceDIM join(OnlinePurchase@ServiceCode == OnlineServiceDIM@ServiceCode,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"OnlinePurchaseMonth, MoviesDIM join(OnlinePurchaseMonth@MovieIdNK == MoviesDIM@MovieIdNK,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join3",
						"join3, OnlineServiceDIM join(OnlinePurchaseMonth@ServiceCode == OnlineServiceDIM@ServiceCode,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join4",
						"join2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          DateKey as integer,",
						"          OnlineServiceKey as integer,",
						"          MovieKey as integer,",
						"          Price as decimal(4,1),",
						"          TransactionId as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     preSQLs:['TRUNCATE TABLE [dbo].[FactOnlinePurchase]'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          DateKey = TransactionDate,",
						"          OnlineServiceKey = ServiceKey,",
						"          MovieKey,",
						"          Price,",
						"          TransactionId",
						"     )) ~> sink1",
						"join4 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          MonthKey as integer,",
						"          OnlineServiceKey as integer,",
						"          PurchaseAmount as decimal(10,1),",
						"          PurchaseQuantity as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          MonthKey,",
						"          OnlineServiceKey = ServiceKey,",
						"          PurchaseAmount,",
						"          PurchaseQuantity",
						"     )) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OnlinePurchase_sql_3nf')]",
				"[concat(variables('factoryId'), '/datasets/Movies_sql_DIM')]",
				"[concat(variables('factoryId'), '/datasets/OnlineService_sql_DIM')]",
				"[concat(variables('factoryId'), '/datasets/OnlinePurchase_sql_dim')]",
				"[concat(variables('factoryId'), '/datasets/OnlinePurchase_monthly_sql_dim')]"
			]
		}
	]
}